{"version":3,"sources":["board/constants.js","board/Cell.jsx","controls/Loader.jsx","controls/Overlay.jsx","board/TicTacToe.jsx","controls/Controls.jsx","services.js","App.js","serviceWorker.js","index.js"],"names":["BoardStatus","Object","freeze","Uninitialized","InProgress","Lose","Tie","Win","isFinished","status","Turn","Circle","Cross","CellState","Empty","INITIAL_BOARD","board","result","turn","Cell","onClick","value","className","Loader","props","style","fontSize","size","Overlay","text","TicTacToe","overlay","undefined","interaction","loading","waiting","map","row","rowIndex","key","cell","cellIndex","move","type","top","index","left","transform","renderStrikethrough","Controls","useState","mine","setMine","id","checked","onChange","htmlFor","play","TICTACTOE_API","API_CONFIG","headers","window","origin","createBoard","a","axios","post","res","data","takeTurn","x","y","put","calcStrikethrough","strikethrough","i","every","col","newBoard","splice","App","state","setState","setInteraction","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yWAAaA,G,YAAcC,OAAOC,OAAO,CACvCC,cAAe,gBACfC,WAAY,cACZC,KAAM,OACNC,IAAK,MACLC,IAAK,MAELC,WAAY,SAAAC,GAAM,OAChBA,IAAWT,EAAYK,MACvBI,IAAWT,EAAYO,QAGdG,EAAOT,OAAOC,OAAO,CAChCS,OAAQ,EACRC,OAAQ,IAGGC,EAAYZ,OAAOC,OAAPD,OAAA,IAAAA,CAAA,GACpBS,EADoB,CAEvBI,MAAO,KAGIC,EAAgB,CAC3BC,MAAO,CACL,CAACH,EAAUC,MAAOD,EAAUC,MAAOD,EAAUC,OAC7C,CAACD,EAAUC,MAAOD,EAAUC,MAAOD,EAAUC,OAC7C,CAACD,EAAUC,MAAOD,EAAUC,MAAOD,EAAUC,QAE/CG,OAAQ,KACRR,OAAQT,EAAYG,cACpBe,KAAMR,EAAKC,QCPEQ,EAnBF,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MACvB,OACE,yBAAKC,UAAU,QACZD,IAAUR,EAAUF,OACnB,yBAAKW,UAAU,iBACbD,IAAUR,EAAUD,MACtB,yBAAKU,UAAU,gBAEf,4BAAQA,UAAU,cAAcF,QAASA,MCMlCG,G,MAdA,SAACC,GACd,OACE,yBAAKF,UAAU,SAASG,MAAO,CAACC,SAAUF,EAAMG,OAC9C,yBAAKL,UAAU,kBACb,uBAAGA,UAAU,0BCWNM,G,MAfC,SAAAJ,GACd,OACE,yBAAKF,UAAU,WACb,yBAAKA,UAAU,mBACb,0BAAMG,MAAO,CAACC,SAAUF,EAAMG,OAAQH,EAAMK,UCgBpD,IAsCeC,EAtCG,SAAAN,GAChB,IAAIO,OAAUC,EAOd,OANIR,EAAMS,YAAYC,UACpBH,EAAU,kBAAC,EAAD,CAAQJ,KAAM,MAEtBH,EAAMS,YAAYE,UACpBJ,EAAU,kBAAC,EAAD,CAASJ,KAAM,GAAIE,KAAK,kBAGlC,0BAAMP,UAAU,aACbE,EAAMR,MAAMoB,KAAI,SAACC,EAAKC,GAAN,OACf,yBAAKhB,UAAU,iBAAiBiB,IAAKD,GAClCD,EAAID,KAAI,SAACI,EAAMC,GAAP,OACP,kBAAC,EAAD,CACEF,IAAKE,EACLrB,QACGI,EAAMP,YAEHe,EADA,kBAAMR,EAAMkB,KAAKJ,EAAUG,IAGjCpB,MAAOmB,WAKdhB,EAAMP,QA1Cb,SAA6BA,GAC3B,IAAMQ,EAAQ,GACd,OAAQR,EAAO0B,MACb,IAAK,MACHlB,EAAMmB,IAAM,GAAoB,IAAf3B,EAAO4B,MACxB,MACF,IAAK,MACHpB,EAAMqB,KAAO,GAAoB,IAAf7B,EAAO4B,MACzB,MACF,QACEpB,EAAMsB,UAA6B,IAAjB9B,EAAO4B,MAAc,gBAAkB,iBAI7D,OAAO,yBAAKvB,UAAW,iCAAmCL,EAAO0B,KAAMlB,MAAOA,IA4BzDuB,CAAoBxB,EAAMP,QAC1Cc,ICbQkB,G,MAhCE,SAAAzB,GAAU,IAAD,EACA0B,oBAAS,GADT,mBACjBC,EADiB,KACXC,EADW,KAExB,OACE,4BAAQ9B,UAAU,YAChB,yBAAKA,UAAU,oBACb,0CACA,8BAAOE,EAAMf,SAEde,EAAMf,SAAWT,EAAYI,YAC5B,yBAAKkB,UAAU,kBACb,yBAAKA,UAAU,eACb,2BAAO+B,GAAG,aAAaV,KAAK,WAAWW,QAASH,EAAMI,SAAU,kBAAMH,GAASD,MAC/E,2BAAOK,QAAQ,cAAf,uBAEF,yBAAKlC,UAAU,cACb,4BAAQF,QAAS,kBAAMI,EAAMiC,KAAKN,KAC/B3B,EAAMf,SAAWT,EAAYG,cAC1B,OACA,mB,gBCrBZuD,EAAgB,qCAChBC,EAAa,CACjBC,QAAS,CAAE,8BAA+BC,OAAOC,SAG5C,SAAeC,EAAtB,kC,4CAAO,WAA2BZ,GAA3B,eAAAa,EAAA,sEACaC,IAAMC,KACtBR,EAAgB,UAAYP,EAAO,OAAS,SAC5CQ,GAHG,cACCQ,EADD,yBAMEA,EAAIC,MANN,4C,sBASA,SAAeC,EAAtB,sC,4CAAO,WAAwBhB,EAAIiB,EAAGC,GAA/B,eAAAP,EAAA,sEACaC,IAAMO,IACtBd,EAAa,WAAOL,EAAP,cAAeiB,EAAf,cAAsBC,GACnCZ,GAHG,cACCQ,EADD,yBAMEA,EAAIC,MANN,4C,sBCTP,SAASK,EAAkBzD,GAKzB,IAHA,IAAI0D,EAAgB,KAFY,WAKvBC,GAEP,OACE3D,EAAM2D,GAAG,KAAO9D,EAAUC,OAC1BE,EAAM2D,GAAGC,OAAM,SAAApC,GAAI,OAAIA,IAASxB,EAAM2D,GAAG,OAEzCD,EAAgB,CAAE/B,KAAM,MAAOE,MAAO8B,GACtC,SAIA3D,EAAM,GAAG2D,KAAO9D,EAAUC,OAC1B,CAACE,EAAM,GAAG2D,GAAI3D,EAAM,GAAG2D,IAAIC,OAAM,SAAApC,GAAI,OAAIA,IAASxB,EAAM,GAAG2D,OAE3DD,EAAgB,CAAE/B,KAAM,MAAOE,MAAO8B,GACtC,cALF,GAVOA,EAAI,EAAGA,EAAI,EAAGA,IAAK,gBAAnBA,GAeL,MAeJ,OAVKD,GACC1D,EAAM,GAAG,KAAOH,EAAUC,QACxBE,EAAM,GAAG,KAAOA,EAAM,GAAG,IAAMA,EAAM,GAAG,KAAOA,EAAM,GAAG,GAC1D0D,EAAgB,CAAE/B,KAAM,OAAQE,MAAO,GAC9B7B,EAAM,GAAG,KAAOA,EAAM,GAAG,IAAMA,EAAM,GAAG,KAAOA,EAAM,GAAG,KACjE0D,EAAgB,CAAE/B,KAAM,OAAQE,MAAO,KAKtC6B,EAGT,SAAShC,EAAK1B,EAAOqB,EAAKwC,EAAK3D,GAC7B,IAAM4D,EAAQ,YAAO9D,GAMrB,OALA8D,EAASzC,GAAT,YAAoByC,EAASzC,IAC7ByC,EAASzC,GAAK0C,OAAOF,EAAK,EAAG3D,GAItB,CAAE4D,YA8DIE,MA3Df,WAAgB,IAAD,EACa9B,mBAASnC,GADtB,mBACNkE,EADM,KACCC,EADD,OAEyBhC,mBAAS,CAC7ChB,SAAS,EACTC,SAAS,IAJE,mBAENF,EAFM,KAEOkD,EAFP,KAOb,OACE,yBAAK7D,UAAU,OACb,kBAAC,EAAD,CACEmC,KAAI,uCAAE,WAAMN,GAAN,eAAAa,EAAA,6DACJmB,EAAe,CAAEhD,SAAS,EAAOD,SAAS,IADtC,SAEe6B,EAAYZ,GAF3B,OAEEiB,EAFF,OAGJc,EAAS,eACJd,EADG,CAGNlD,KAAMR,EAAKC,UAEbwE,EAAe,CAAEhD,SAAS,EAAOD,SAAS,IARtC,2CAAF,sDAUJzB,OAAQwE,EAAMxE,SAEhB,kBAAC,EAAD,CACEO,MAAOiE,EAAMjE,MACbiB,YAAaA,EACbS,KAAI,uCAAE,WAAOL,EAAKwC,GAAZ,qBAAAb,EAAA,yDAEFiB,EAAM/D,OAASR,EAAKC,QACpBsE,EAAMxE,SAAWT,EAAYI,WAH3B,0DAQiBsC,EAAKuC,EAAMjE,MAAOqB,EAAKwC,EAAKI,EAAM/D,MAA/C4D,EARJ,EAQIA,SACRK,EAAe,CAAEhD,SAAS,EAAOD,SAAS,IAC1CgD,EAAS,eAAKD,EAAN,CAAajE,MAAO8D,EAAU5D,KAAML,EAAUD,SAVlD,SAYcyD,EAASY,EAAM5B,GAAIhB,EAAKwC,GAZtC,OAYEV,EAZF,OAaAO,EAAgB,KAChB1E,EAAYQ,WAAW2D,EAAI1D,UAC7BiE,EAAgBD,EAAkBN,EAAInD,QAExCkE,EAAS,eACJf,EADG,CAENlD,OAAQyD,EACRxD,KAAML,EAAUF,UAEdwD,EAAI1D,SAAWT,EAAYI,WAC7B+E,EAAe,CAAEhD,SAAS,EAAOD,SAAS,IAE1CiD,EAAe,CAAEhD,SAAS,EAAMD,SAAS,IAzBvC,4CAAF,wDA4BJjB,OAAQgE,EAAMhE,WChGFmE,QACW,cAA7BvB,OAAOwB,SAASC,UAEe,UAA7BzB,OAAOwB,SAASC,UAEhBzB,OAAOwB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d3a081d0.chunk.js","sourcesContent":["export const BoardStatus = Object.freeze({\n  Uninitialized: \"uninitialized\",\n  InProgress: \"in-progress\",\n  Lose: \"lose\",\n  Tie: \"tie\",\n  Win: \"win\",\n\n  isFinished: status =>\n    status === BoardStatus.Lose ||\n    status === BoardStatus.Win\n});\n\nexport const Turn = Object.freeze({\n  Circle: 1,\n  Cross: -1\n});\n\nexport const CellState = Object.freeze({\n  ...Turn,\n  Empty: 0\n});\n\nexport const INITIAL_BOARD = {\n  board: [\n    [CellState.Empty, CellState.Empty, CellState.Empty],\n    [CellState.Empty, CellState.Empty, CellState.Empty],\n    [CellState.Empty, CellState.Empty, CellState.Empty]\n  ],\n  result: null,\n  status: BoardStatus.Uninitialized,\n  turn: Turn.Circle\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { CellState } from \"./constants\";\n\nconst Cell = ({ onClick, value }) => {\n  return (\n    <div className=\"cell\">\n      {value === CellState.Circle ? (\n        <div className=\"cell__circle\" />\n      ) : value === CellState.Cross ? (\n        <div className=\"cell__cross\" />\n      ) : (\n        <button className=\"cell__empty\" onClick={onClick} />\n      )}\n    </div>\n  );\n};\n\nCell.propTypes = {\n  onClick: PropTypes.func,\n  value: PropTypes.oneOf([CellState.Circle, CellState.Cross, CellState.Empty]).isRequired,\n};\n\nexport default Cell;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Loader.css\";\n\nconst Loader = (props) => {\n  return (\n    <div className=\"loader\" style={{fontSize: props.size}}>\n      <div className=\"loader__center\">\n        <i className=\"fa fa-cog fa-spin\" />\n      </div>\n    </div>\n  );\n}\n\nLoader.propTypes = {\n  size: PropTypes.number.isRequired,\n}\n\nexport default Loader;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Overlay.css\";\n\nconst Overlay = props => {\n  return (\n    <div className=\"overlay\">\n      <div className=\"overlay__center\">\n        <span style={{fontSize: props.size}}>{props.text}</span>\n      </div>\n    </div>\n  );\n};\n\nOverlay.propTypes = {\n  size: PropTypes.number.isRequired,\n  text: PropTypes.string.isRequired,\n};\n\nexport default Overlay;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./TicTacToe.css\";\nimport Cell from \"./Cell\";\nimport Loader from \"../controls/Loader\";\nimport Overlay from \"../controls/Overlay\";\n\nfunction renderStrikethrough(result) {\n  const style = {};\n  switch (result.type) {\n    case \"row\":\n      style.top = 48 + result.index * 102;\n      break;\n    case \"col\":\n      style.left = 48 + result.index * 102;\n      break;\n    default: // diag\n      style.transform = result.index === 0 ? \"rotate(45deg)\" : \"rotate(-45deg)\";\n      break;\n  }\n\n  return <div className={\"strike-through strike-through-\" + result.type} style={style}></div>;\n}\n\nconst TicTacToe = props => {\n  let overlay = undefined;\n  if (props.interaction.loading) {\n    overlay = <Loader size={90}/>;\n  }\n  if (props.interaction.waiting) {\n    overlay = <Overlay size={24} text=\"Start a game\"/>;\n  }\n  return (\n    <main className=\"tictactoe\">\n      {props.board.map((row, rowIndex) => (\n        <div className=\"tictactoe__row\" key={rowIndex}>\n          {row.map((cell, cellIndex) => (\n            <Cell\n              key={cellIndex}\n              onClick={\n                !props.result\n                  ? () => props.move(rowIndex, cellIndex)\n                  : undefined\n              }\n              value={cell}\n            />\n          ))}\n        </div>\n      ))}\n      {props.result && renderStrikethrough(props.result)}\n      {overlay}\n    </main>\n  );\n};\n\nTicTacToe.propTypes = {\n  board: PropTypes.array.isRequired,\n  interaction: PropTypes.object.isRequired,\n  move: PropTypes.func.isRequired,\n  result: PropTypes.object\n};\n\nexport default TicTacToe;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { BoardStatus } from \"../board/constants\";\nimport \"./Controls.css\";\n\nconst Controls = props => {\n  const [mine, setMine] = useState(true);\n  return (\n    <header className=\"controls\">\n      <div className=\"controls__status\">\n        <label>Status:</label>\n        <span>{props.status}</span>\n      </div>\n      {props.status !== BoardStatus.InProgress && (\n        <div className=\"controls__game\">\n          <div className=\"game__start\">\n            <input id=\"game-start\" type=\"checkbox\" checked={mine} onChange={() => setMine(!mine)}/>\n            <label htmlFor=\"game-start\">Start with my move</label>\n          </div>\n          <div className=\"game__play\">\n            <button onClick={() => props.play(mine)}>\n              {props.status === BoardStatus.Uninitialized\n                ? \"Play\"\n                : \"Play again\"}\n            </button>\n          </div>\n        </div>\n      )}\n    </header>\n  );\n};\n\nControls.propTypes = {\n  play: PropTypes.func.isRequired,\n  status: PropTypes.string.isRequired\n};\n\nexport default Controls;\n","import axios from \"axios\";\n\nconst TICTACTOE_API = \"https://tictac.aktors.ee/api/board\";\nconst API_CONFIG = {\n  headers: { \"Access-Control-Allow-Origin\": window.origin }\n};\n\nexport async function createBoard(mine) {\n  const res = await axios.post(\n    TICTACTOE_API + \"?turn=\" + (mine ? \"mine\" : \"yours\"),\n    API_CONFIG\n  );\n\n  return res.data;\n}\n\nexport async function takeTurn(id, x, y) {\n  const res = await axios.put(\n    TICTACTOE_API + `/${id}?x=${x}&y=${y}`,\n    API_CONFIG\n  );\n\n  return res.data;\n}\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport TicTacToe from \"./board/TicTacToe\";\nimport Controls from \"./controls/Controls\";\nimport { BoardStatus, CellState, INITIAL_BOARD, Turn } from \"./board/constants\";\nimport { createBoard, takeTurn } from \"./services\";\n\nfunction calcStrikethrough(board) {\n  // winning solution: row, col or diagonal filled\n  let strikethrough = null;\n\n  // rows & columns\n  for (let i = 0; i < 3; i++) {\n    // rows\n    if (\n      board[i][0] !== CellState.Empty &&\n      board[i].every(cell => cell === board[i][0])\n    ) {\n      strikethrough = { type: \"row\", index: i };\n      break;\n    }\n    // columns\n    if (\n      board[0][i] !== CellState.Empty &&\n      [board[1][i], board[2][i]].every(cell => cell === board[0][i])\n    ) {\n      strikethrough = { type: \"col\", index: i };\n      break;\n    }\n  }\n\n  // diagonals\n  if (!strikethrough) {\n    if (board[1][1] !== CellState.Empty) {\n      if (board[1][1] === board[0][0] && board[1][1] === board[2][2]) {\n        strikethrough = { type: \"diag\", index: 0 };\n      } else if (board[1][1] === board[0][2] && board[1][1] === board[2][0]) {\n        strikethrough = { type: \"diag\", index: 2 };\n      }\n    }\n  }\n\n  return strikethrough;\n}\n\nfunction move(board, row, col, turn) {\n  const newBoard = [...board];\n  newBoard[row] = [...newBoard[row]];\n  newBoard[row].splice(col, 1, turn);\n\n  // const status = calculateStatus(newBoard);\n\n  return { newBoard };\n}\n\nfunction App() {\n  const [state, setState] = useState(INITIAL_BOARD);\n  const [interaction, setInteraction] = useState({\n    loading: false,\n    waiting: true,\n  });\n\n  return (\n    <div className=\"App\">\n      <Controls\n        play={async mine => {\n          setInteraction({ waiting: false, loading: true });\n          const data = await createBoard(mine);\n          setState({\n            ...data,\n            // If server's turn, the first move is done by calling the create board\n            turn: Turn.Circle\n          });\n          setInteraction({ waiting: false, loading: false });\n        }}\n        status={state.status}\n      />\n      <TicTacToe\n        board={state.board}\n        interaction={interaction}\n        move={async (row, col) => {\n          if (\n            state.turn !== Turn.Circle ||\n            state.status !== BoardStatus.InProgress\n          ) {\n            // Do nothing while waiting for server turn\n            return;\n          }\n          const { newBoard } = move(state.board, row, col, state.turn);\n          setInteraction({ waiting: false, loading: true });\n          setState({ ...state, board: newBoard, turn: CellState.Cross });\n\n          const res = await takeTurn(state.id, row, col);\n          let strikethrough = null;\n          if (BoardStatus.isFinished(res.status)) {\n            strikethrough = calcStrikethrough(res.board);\n          }\n          setState({\n            ...res,\n            result: strikethrough,\n            turn: CellState.Circle\n          });\n          if (res.status === BoardStatus.InProgress) {\n            setInteraction({ waiting: false, loading: false });\n          } else {\n            setInteraction({ waiting: true, loading: false });\n          }\n        }}\n        result={state.result}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}