{"version":3,"sources":["Cell.jsx","TicTacToe.jsx","GameStatus.jsx","App.js","serviceWorker.js","index.js"],"names":["Cell","onClick","value","className","TicTacToe","props","board","map","row","rowIndex","key","cell","cellIndex","result","undefined","move","style","type","top","index","left","transform","renderStrikethrough","GameStatus","reset","status","INITIAL_BOARD","turn","App","useState","state","setState","col","newBoard","splice","i","every","calculateStatus","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cd3fbb8e.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const CIRCLE = 1;\nexport const CROSS = -1;\nexport const EMPTY = 0;\n\nconst Cell = ({ onClick, value }) => {\n  return (\n    <div className=\"cell\">\n      {value === CIRCLE ? (\n        <div className=\"circle\" />\n      ) : value === CROSS ? (\n        <div className=\"cross\" />\n      ) : (\n        <button className=\"empty\" onClick={onClick} />\n      )}\n    </div>\n  );\n};\n\nCell.propTypes = {\n  onClick: PropTypes.func,\n  value: PropTypes.oneOf([CIRCLE, CROSS, EMPTY]).isRequired,\n};\n\nexport default Cell;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./TicTacToe.css\";\nimport Cell from \"./Cell\";\n\nfunction renderStrikethrough(result) {\n  const style = {};\n  switch (result.type) {\n    case \"row\":\n      style.top = 48 + result.index * 102;\n      break;\n    case \"col\":\n      style.left = 48 + result.index * 102;\n      break;\n    default: // diag\n      style.transform = result.index === 0 ? \"rotate(45deg)\" : \"rotate(-45deg)\";\n      break;\n  }\n\n  return <div className={\"strike-through strike-through-\" + result.type} style={style}></div>;\n}\n\nconst TicTacToe = props => {\n  return (\n    <div className=\"tictactoe\">\n      {props.board.map((row, rowIndex) => (\n        <div className=\"row\" key={rowIndex}>\n          {row.map((cell, cellIndex) => (\n            <Cell\n              key={cellIndex}\n              onClick={\n                !props.result\n                  ? () => props.move(rowIndex, cellIndex)\n                  : undefined\n              }\n              value={cell}\n            />\n          ))}\n        </div>\n      ))}\n      {props.result && renderStrikethrough(props.result)}\n    </div>\n  );\n};\n\nTicTacToe.propTypes = {\n  board: PropTypes.array.isRequired,\n  move: PropTypes.func.isRequired,\n  result: PropTypes.object\n};\n\nexport default TicTacToe;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./GameStatus.css\";\n\nconst GameStatus = ({reset, status}) => {\n  return (\n    <div className=\"game-status\">\n      <div className=\"game-status-text\">{status}</div>\n      <div className=\"game-status-reset\">\n        <button onClick={reset}>Reset</button>\n      </div>\n    </div>\n  );\n};\n\nGameStatus.propTypes = {\n  reset: PropTypes.func.isRequired,\n  status: PropTypes.string.isRequired\n};\n\nexport default GameStatus;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport TicTacToe from \"./TicTacToe\";\nimport { CIRCLE, CROSS, EMPTY } from \"./Cell\";\nimport GameStatus from \"./GameStatus\";\n\nconst STATUS_IN_PROGRESS = \"in-progress\";\nconst STATUS_LOSE = \"lose\";\nconst STATUS_TIE = \"tie\";\nconst STATUS_WIN = \"win\";\nconst INITIAL_BOARD = {\n  board: [\n    [EMPTY, EMPTY, EMPTY],\n    [EMPTY, EMPTY, EMPTY],\n    [EMPTY, EMPTY, EMPTY]\n  ],\n  result: null,\n  status: STATUS_IN_PROGRESS,\n  turn: CROSS\n};\n\nfunction calculateStatus(board) {\n  // winning solution: row, col or diagonal filled\n  let status = { status: STATUS_IN_PROGRESS, result: null };\n\n  // rows & columns\n  for (let i = 0; i < 3; i++) {\n    // rows\n    if (board[i][0] !== EMPTY && board[i].every(cell => cell === board[i][0])) {\n      status.status = board[i][0] === CIRCLE ? STATUS_WIN : STATUS_LOSE;\n      status.result = { type: \"row\", index: i };\n      break;\n    }\n    // columns\n    if (\n      board[0][i] !== EMPTY &&\n      [board[1][i], board[2][i]].every(cell => cell === board[0][i])\n    ) {\n      status.status = board[0][i] === CIRCLE ? STATUS_WIN : STATUS_LOSE;\n      status.result = { type: \"col\", index: i };\n      break;\n    }\n  }\n\n  // diagonals\n  if (status.status === STATUS_IN_PROGRESS) {\n    if (board[1][1] !== EMPTY) {\n      if (board[1][1] === board[0][0] && board[1][1] === board[2][2]) {\n        status.result = { type: \"diag\", index: 0 };\n      } else if (board[1][1] === board[0][2] && board[1][1] === board[2][0]) {\n        status.result = { type: \"diag\", index: 2 };\n      }\n      if (!!status.result) {\n        status.status = board[1][1] === CIRCLE ? STATUS_WIN : STATUS_LOSE;\n      }\n    }\n  }\n\n  if (status.status === STATUS_IN_PROGRESS) {\n    if (board.every(row => row.every(cell => cell !== EMPTY))) {\n      status.status = STATUS_TIE;\n    }\n  }\n\n  return status;\n}\n\nfunction move(board, row, col, turn) {\n  const newBoard = [...board];\n  newBoard[row] = [...newBoard[row]];\n  newBoard[row].splice(col, 1, turn);\n\n  const status = calculateStatus(newBoard);\n\n  return { ...status, newBoard };\n}\n\nfunction App() {\n  const [state, setState] = useState(INITIAL_BOARD);\n  return (\n    <div className=\"App\">\n      <TicTacToe\n        board={state.board}\n        move={(row, col) => {\n          const { newBoard, result, status } = move(\n            state.board,\n            row,\n            col,\n            state.turn\n          );\n          setState({\n            board: newBoard,\n            status: status,\n            result,\n            turn: state.turn === CIRCLE ? CROSS : CIRCLE\n          });\n        }}\n        result={state.result}\n      />\n      {state.status !== STATUS_IN_PROGRESS && (\n        <GameStatus\n          reset={() => setState(INITIAL_BOARD)}\n          status={state.status}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}