{"version":3,"sources":["board/constants.js","controls/game/Cell.jsx","controls/common/Loader.jsx","controls/common/Overlay.jsx","controls/game/TicTacToe.jsx","controls/game/Controls.jsx","board/board.js","board/minimax.solver.js","board/backend.js","controls/menu/Menu.jsx","controls/common/hooks.js","App.js","serviceWorker.js","index.js"],"names":["Backend","Object","freeze","Server","Minimax","GameStatus","Uninitialized","InProgress","Lose","Tie","Win","isFinished","status","CellState","Circle","Cross","Empty","TurnType","Ai","Player","SolutionType","Row","Column","Diagonal","INITIAL_BOARD","board","zeros","toArray","result","turn","Cell","onClick","value","className","Loader","props","style","fontSize","size","Overlay","text","TicTacToe","overlay","undefined","interaction","loading","waiting","map","row","rowIndex","key","cell","cellIndex","move","type","top","index","left","transform","renderStrikethrough","Controls","useState","mine","setMine","id","checked","onChange","htmlFor","play","getRowStatus","rows","entries","markers","Set","has","unique","values","next","boardStatus","rowStatus","transpose","diag","copyBoard","col","newBoard","splice","minimax","depth","alpha","beta","bestMove","bestScore","getScore","allowed","forEach","i","j","push","allowedMoves","length","score","Math","max","min","globalBoard","mmCreateBoard","a","Promise","resolve","mmTakeTurn","gameId","aiMove","TICTACTOE_API","API_CONFIG","headers","window","origin","createBoard","axios","post","res","data","takeTurn","x","y","put","MinimaxBackend","ServerBackend","Switch","label","replace","makeSelectHandler","backend","deselectBackend","select","event","target","Menu","selectBackend","ref","useRef","open","setOpen","handler","useCallback","serverHandler","minimaxHandler","useEffect","listener","current","contains","document","addEventListener","removeEventListener","useOnClickOutside","App","state","setState","setBackend","setInteraction","strikethrough","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8f003afa.chunk.js","sourcesContent":["import { zeros } from 'mathjs';\n\nexport const Backend = Object.freeze({\n  Server: \"server\",\n  Minimax: \"minimax algorithm\",\n});\n\nexport const GameStatus = Object.freeze({\n  Uninitialized: \"uninitialized\",\n  InProgress: \"in-progress\",\n  Lose: \"lose\",\n  Tie: \"tie\",\n  Win: \"win\",\n\n  isFinished: (status) =>\n    status === GameStatus.Lose || status === GameStatus.Win,\n});\n\nexport const CellState = Object.freeze({\n  Circle: 1,\n  Cross: -1,\n  Empty: 0,\n});\n\nexport const TurnType = Object.freeze({\n  Ai: CellState.Cross,\n  Player: CellState.Circle,\n});\n\nexport const SolutionType = Object.freeze({\n  Row: \"row\",\n  Column: \"col\",\n  Diagonal: \"diag\",\n});\n\nexport const INITIAL_BOARD = {\n  board: zeros(3, 3).toArray(),\n  result: null,\n  status: GameStatus.Uninitialized,\n  turn: TurnType.Player,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { CellState } from \"../../board/constants\";\n\nconst Cell = ({ onClick, value }) => {\n  return (\n    <div className=\"cell\">\n      {value === CellState.Circle ? (\n        <div className=\"cell__circle\" />\n      ) : value === CellState.Cross ? (\n        <div className=\"cell__cross\" />\n      ) : (\n        <button className=\"cell__empty\" onClick={onClick} />\n      )}\n    </div>\n  );\n};\n\nCell.propTypes = {\n  onClick: PropTypes.func,\n  value: PropTypes.oneOf([CellState.Circle, CellState.Cross, CellState.Empty]).isRequired,\n};\n\nexport default Cell;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Loader.css\";\n\nconst Loader = (props) => {\n  return (\n    <div className=\"loader\" style={{fontSize: props.size}}>\n      <div className=\"loader__center\">\n        <i className=\"fa fa-cog fa-spin\" />\n      </div>\n    </div>\n  );\n}\n\nLoader.propTypes = {\n  size: PropTypes.number.isRequired,\n}\n\nexport default Loader;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Overlay.css\";\n\nconst Overlay = props => {\n  return (\n    <div className=\"overlay\">\n      <div className=\"overlay__center\">\n        <span style={{fontSize: props.size}}>{props.text}</span>\n      </div>\n    </div>\n  );\n};\n\nOverlay.propTypes = {\n  size: PropTypes.number.isRequired,\n  text: PropTypes.string.isRequired,\n};\n\nexport default Overlay;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./TicTacToe.css\";\nimport Cell from \"./Cell\";\nimport Loader from \"../common/Loader\";\nimport Overlay from \"../common/Overlay\";\n\nfunction renderStrikethrough(result) {\n  const style = {};\n  switch (result.type) {\n    case \"row\":\n      style.top = 48 + result.index * 102;\n      break;\n    case \"col\":\n      style.left = 48 + result.index * 102;\n      break;\n    default: // diag\n      style.transform = result.index === 0 ? \"rotate(45deg)\" : \"rotate(-45deg)\";\n      break;\n  }\n\n  return <div className={\"strike-through strike-through-\" + result.type} style={style}></div>;\n}\n\nconst TicTacToe = props => {\n  let overlay = undefined;\n  if (props.interaction.loading) {\n    overlay = <Loader size={90}/>;\n  }\n  if (props.interaction.waiting) {\n    overlay = <Overlay size={24} text=\"Start a game\"/>;\n  }\n  return (\n    <main className=\"tictactoe\">\n      {props.board.map((row, rowIndex) => (\n        <div className=\"tictactoe__row\" key={rowIndex}>\n          {row.map((cell, cellIndex) => (\n            <Cell\n              key={cellIndex}\n              onClick={\n                !props.result\n                  ? () => props.move(rowIndex, cellIndex)\n                  : undefined\n              }\n              value={cell}\n            />\n          ))}\n        </div>\n      ))}\n      {props.result && renderStrikethrough(props.result)}\n      {overlay}\n    </main>\n  );\n};\n\nTicTacToe.propTypes = {\n  board: PropTypes.array.isRequired,\n  interaction: PropTypes.object.isRequired,\n  move: PropTypes.func.isRequired,\n  result: PropTypes.object\n};\n\nexport default TicTacToe;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { GameStatus } from \"../../board/constants\";\nimport \"./Controls.css\";\n\nconst Controls = props => {\n  const [mine, setMine] = useState(true);\n  return (\n    <header className=\"controls\">\n      <div className=\"controls__status\">\n        <label>Status:</label>\n        <span>{props.status}</span>\n      </div>\n      {props.status !== GameStatus.InProgress && (\n        <div className=\"controls__game\">\n          <div className=\"game__start\">\n            <input id=\"game-start\" type=\"checkbox\" checked={mine} onChange={() => setMine(!mine)}/>\n            <label htmlFor=\"game-start\">Start with my move</label>\n          </div>\n          <div className=\"game__play\">\n            <button onClick={() => props.play(mine)}>\n              {props.status === GameStatus.Uninitialized\n                ? \"Play\"\n                : \"Play again\"}\n            </button>\n          </div>\n        </div>\n      )}\n    </header>\n  );\n};\n\nControls.propTypes = {\n  play: PropTypes.func.isRequired,\n  status: PropTypes.string.isRequired\n};\n\nexport default Controls;\n","import { diag, transpose } from \"mathjs\";\nimport { CellState, GameStatus, SolutionType } from \"./constants\";\n\nfunction getRowStatus(rows, type) {\n  const status = {\n    status: GameStatus.Tie,\n  };\n  for (const [index, row] of rows.entries()) {\n    const markers = new Set(row);\n    const hasEmpty = markers.has(CellState.Empty);\n    if (hasEmpty) {\n      status.status = GameStatus.InProgress;\n    } else {\n      if (markers.size === 1) {\n        let unique = markers.values().next().value;\n        const result = {\n          index,\n          type,\n        };\n        result.status =\n          unique === CellState.Circle ? GameStatus.Win : GameStatus.Lose;\n\n        return result;\n      }\n    }\n  }\n\n  return status;\n}\n\n/**\n * Get allowed moves\n * \n * @param {number[][]} board\n * @returns {number[][]} Array of allowed moves (x, y)\n */\nexport function allowedMoves(board) {\n  const allowed = [];\n  board.forEach((row, i) => {\n    row.forEach((cell, j) => {\n      if (cell === CellState.Empty) {\n        allowed.push([i, j]);\n      }\n    });\n  });\n\n  return allowed;\n}\n\n\n/**\n * Calculate the status of the board\n * @param {number[][]} board\n * @returns {Object} Status and in case of win / loss also a solution (index and type)\n */\nexport function boardStatus(board) {\n  const rowStatus = getRowStatus(board, SolutionType.Row);\n  if (GameStatus.isFinished(rowStatus.status)) {\n    return rowStatus;\n  }\n  const columns = transpose(board);\n  let status = getRowStatus(columns, SolutionType.Column);\n  if (GameStatus.isFinished(status.status)) {\n    return status;\n  }\n  const diags = [diag(board), [board[0][2], board[1][1], board[2][0]]];\n  status = getRowStatus(diags, SolutionType.Diagonal);\n  if (GameStatus.isFinished(status.status)) {\n    return status;\n  }\n\n  // Tie or in progress\n  return rowStatus;\n}\n\n/**\n * @param {number[][]} board\n * @returns {number[][]} Deep copy of the board\n */\nexport function copyBoard(board) {\n  return board.map(row => [...row]);\n}\n\n/**\n * Calculate the new state of the board after specified move; does not validate the move\n * @param {number[][]} board\n * @returns {number[][]} New board\n */\nexport function move(board, row, col, turn) {\n  const newBoard = [...board];\n  newBoard[row] = [...newBoard[row]];\n  newBoard[row].splice(col, 1, turn);\n\n  return { newBoard };\n}\n","import { GameStatus, TurnType, INITIAL_BOARD } from \"./constants\";\nimport { allowedMoves, boardStatus, copyBoard, move } from \"./board\";\nimport { zeros } from \"mathjs\";\n\nconst MINIMUM = -1000;\nconst MAXIMUM = 1000;\n\nfunction getScore(status) {\n  if (status === GameStatus.Lose) {\n    return MAXIMUM;\n  }\n\n  if (status !== GameStatus.InProgress) {\n    return MINIMUM;\n  }\n\n  return 0;\n}\n\n/**\n * Tic-tac-toe implementation using minimax algorithm\n * For detailed explanation @see https://github.com/GeorgeSeif/Tic-Tac-Toe-AI\n */\nexport function minimax(board, turn, depth, alpha, beta) {\n  let bestMove = [-1, -1];\n  let bestScore = turn === TurnType.Ai ? MINIMUM : MAXIMUM;\n\n  const status = boardStatus(board).status;\n  if (status !== GameStatus.InProgress) {\n    bestScore = getScore(status);\n    return [bestScore, bestMove];\n  }\n\n  const allowed = allowedMoves(board);\n  if (depth === 0 && allowed.length === 1) {\n    // Last move\n    return [0, allowed[0]];\n  }\n  for (let i = 0; i < allowed.length; i++) {\n    const [row, col] = allowed[i];\n    board[row][col] = turn;\n\n    const score = minimax(\n      board,\n      turn === TurnType.Ai ? TurnType.Player : TurnType.Ai,\n      depth + 1,\n      alpha,\n      beta\n    )[0];\n\n    if (turn === TurnType.Ai) {\n      // Maximizing player's turn\n      if (bestScore < score) {\n        bestScore = score - depth * 10;\n        bestMove = [row, col];\n\n        // Check if this branch's best move is worse than the best\n        // option of a previously search branch. If it is, skip it\n        alpha = Math.max(alpha, bestScore);\n        board[row][col] = 0;\n        if (beta <= alpha) {\n          break;\n        }\n      }\n    } else {\n      // Minimizing opponent's turn\n      if (bestScore > score) {\n        bestScore = score + depth * 10;\n        bestMove = [row, col];\n\n        // Check if this branch's best move is worse than the best\n        // option of a previously search branch. If it is, skip it\n        beta = Math.min(beta, bestScore);\n        board[row][col] = 0;\n        if (beta <= alpha) {\n          break;\n        }\n      }\n    }\n    board[row][col] = 0;\n  }\n  return [bestScore, bestMove];\n}\n\nvar globalBoard = null;\n\nexport async function mmCreateBoard(mine, id) {\n  let board;\n  if (mine) {\n    board = INITIAL_BOARD;\n  } else {\n    board = {\n      board: zeros(3, 3).toArray(),\n      turn: TurnType.Player,\n    };\n\n    board.board[1][1] = TurnType.Ai;\n    board.id = id;\n  }\n\n  board.status = GameStatus.InProgress;\n  board.id = 1;\n  globalBoard = board.board;\n  return Promise.resolve(board);\n}\n\nexport async function mmTakeTurn(gameId, row, col) {\n  globalBoard = move(globalBoard, row, col, TurnType.Player).newBoard;\n  let status = boardStatus(globalBoard);\n  if (status.status === GameStatus.InProgress) {\n    const aiMove = minimax(\n      copyBoard(globalBoard),\n      TurnType.Ai,\n      0,\n      MINIMUM,\n      MAXIMUM\n    );\n\n    globalBoard = move(globalBoard, aiMove[1][0], aiMove[1][1], TurnType.Ai)\n      .newBoard;\n    status = boardStatus(globalBoard);\n  }\n\n  return Promise.resolve({\n    board: globalBoard,\n    id: gameId,\n    status: status.status,\n    turn: TurnType.Player,\n  });\n}\n","import axios from \"axios\";\nimport { mmCreateBoard, mmTakeTurn } from \"./minimax.solver\";\n\nconst TICTACTOE_API = \"https://tictac.aktors.ee/api/board\";\nconst API_CONFIG = {\n  headers: { \"Access-Control-Allow-Origin\": window.origin }\n};\n\nasync function createBoard(mine) {\n  const res = await axios.post(\n    TICTACTOE_API + \"?turn=\" + (mine ? \"mine\" : \"yours\"),\n    API_CONFIG\n  );\n\n  return res.data;\n}\n\nasync function takeTurn(id, x, y) {\n  const res = await axios.put(\n    TICTACTOE_API + `/${id}?x=${x}&y=${y}`,\n    API_CONFIG\n  );\n\n  return res.data;\n}\n\n\nexport class MinimaxBackend {\n  createBoard = async (mine) => {\n    const id = this.id;\n    this.id += 1;\n    return mmCreateBoard(mine, id);\n  }\n\n  takeTurn = async (id, x, y) => {\n    return mmTakeTurn(id, x, y);\n  }\n}\n\nexport class ServerBackend {\n  createBoard = async (mine) => {\n    return createBoard(mine);\n  }\n\n  takeTurn = async (id, x, y) => {\n    return takeTurn(id, x, y);\n  }\n}\n","import React, { useCallback, useState, useRef } from \"react\";\nimport { Backend } from \"../../board/constants\";\nimport \"./Menu.css\";\nimport { useOnClickOutside } from \"../common/hooks\";\n\nconst Switch = ({ label, checked, onChange }) => {\n  const id = label.replace(\" \", \"-\");\n  return (\n    <div className=\"switch\">\n      <div className=\"switch__container\">\n        <input\n          id={id}\n          checked={checked}\n          onChange={onChange}\n          className=\"switch__input\"\n          type=\"checkbox\"\n        />\n        <label htmlFor={id} className=\"switch__label\" />\n      </div>\n      <div className=\"switch__content\">{label}</div>\n    </div>\n  );\n};\n\nfunction makeSelectHandler(backend, deselectBackend, select) {\n  return function handleInputChange(event) {\n    const target = event.target;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n\n    if (value) {\n      select(backend);\n    } else {\n      select(deselectBackend);\n    }\n  };\n}\n\nconst Menu = ({ backend, selectBackend }) => {\n  const ref = useRef();\n  const [open, setOpen] = useState(false);\n  const handler = useCallback(() => setOpen(false), []);\n  const serverHandler = useCallback(\n    makeSelectHandler(Backend.Server, Backend.Minimax, selectBackend),\n    []\n  );\n  const minimaxHandler = useCallback(\n    makeSelectHandler(Backend.Minimax, Backend.Server, selectBackend),\n    []\n  );\n  useOnClickOutside(ref, handler);\n\n  return (\n    <div className=\"menu\" ref={ref}>\n      <button className=\"menu__toggler\" onClick={() => setOpen(!open)}>\n        <i className=\"fas fa-bars\"></i>\n      </button>\n      {open && (\n        <div className=\"menu__dropdown\">\n          <div>Play against</div>\n          <Switch\n            checked={backend === Backend.Server}\n            label={Backend.Server}\n            onChange={serverHandler}\n          />\n          <Switch\n            checked={backend === Backend.Minimax}\n            label={Backend.Minimax}\n            onChange={minimaxHandler}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Menu;\n","import { useEffect } from 'react';\n\nexport function useOnClickOutside(ref, handler) {\n\n  useEffect(\n    () => {\n      const listener = event => {\n        // Do nothing if clicking ref's element or descendent elements\n        if (!ref.current || ref.current.contains(event.target)) {\n          return;\n        }\n\n        handler(event);\n      };\n\n      document.addEventListener('mousedown', listener);\n      document.addEventListener('touchstart', listener);\n\n      return () => {\n        document.removeEventListener('mousedown', listener);\n        document.removeEventListener('touchstart', listener);\n      };\n    },\n    // Add ref and handler to effect dependencies\n    // Handler is a new function on every render  -that will ...\n    // ... callback/cleanup to run every render. In order to ...\n    // ... avoid that wrap handler in useCallback before ...\n    // ... passing it into this hook.\n    [ref, handler]\n  );\n}\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport TicTacToe from \"./controls/game/TicTacToe\";\nimport Controls from \"./controls/game/Controls\";\nimport {\n  GameStatus,\n  INITIAL_BOARD,\n  TurnType,\n  Backend,\n} from \"./board/constants\";\nimport { MinimaxBackend, ServerBackend } from \"./board/backend\";\nimport { boardStatus } from \"./board/board\";\nimport Menu from \"./controls/menu/Menu\";\n\nfunction App() {\n  const [state, setState] = useState(INITIAL_BOARD);\n  const [backend, setBackend] = useState(new ServerBackend());\n  const [interaction, setInteraction] = useState({\n    loading: false,\n    waiting: true,\n  });\n\n  return (\n    <div className=\"App\">\n      <Menu\n        backend={\n          backend instanceof ServerBackend ? Backend.Server : Backend.Minimax\n        }\n        selectBackend={(backend) => {\n          setState(INITIAL_BOARD);\n          if (backend === Backend.Server) {\n            setBackend(new ServerBackend());\n          } else {\n            setBackend(new MinimaxBackend());\n          }\n        }}\n      />\n      <Controls\n        play={async (mine) => {\n          setInteraction({ waiting: false, loading: true });\n          const data = await backend.createBoard(mine);\n          setState({\n            ...data,\n            // If server's turn, the first move is done by calling the create board\n            turn: TurnType.Player,\n          });\n          setInteraction({ waiting: false, loading: false });\n        }}\n        status={state.status}\n      />\n      <TicTacToe\n        board={state.board}\n        interaction={interaction}\n        move={async (row, col) => {\n          if (\n            state.turn !== TurnType.Player ||\n            state.status !== GameStatus.InProgress\n          ) {\n            // Do nothing while waiting for server turn\n            return;\n          }\n          setInteraction({ waiting: false, loading: true });\n          setState({ ...state, turn: TurnType.Ai });\n\n          const res = await backend.takeTurn(state.id, row, col);\n          let strikethrough = null;\n          if (GameStatus.isFinished(res.status)) {\n            strikethrough = boardStatus(res.board);\n          }\n          setState({\n            ...res,\n            result: strikethrough,\n            turn: TurnType.Player,\n          });\n          if (res.status === GameStatus.InProgress) {\n            setInteraction({ waiting: false, loading: false });\n          } else {\n            setInteraction({ waiting: true, loading: false });\n          }\n        }}\n        result={state.result}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}